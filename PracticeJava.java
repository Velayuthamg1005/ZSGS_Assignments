import java.util.*;

// Q-No 01 Given two binary strings a and b, return their sum as a binary string

class ReturnSum{
	public static void main(String args[]){
		String a="10";
		String b="11";
		
		int x=a.length()-1;
		int y=b.length()-1;
		
		int carry=0;
		String sum="";
		
		while(x>=0 || y>=0 || carry>0){
			int solveA=0;
			int solveB=0;
			
			if(x>=0){
				solveA=a.charAt(x)-'0';
			}
			if(y>=0){
				solveB=b.charAt(y)-'0';
			}
			
			int total=solveA+solveB+carry;
			int digit=total%2;
			carry=total/2;
			
			sum=digit+sum;
			x--;
			y--;
		}
		
		System.out.println("Result: "+sum);
	}
}

// Q-No 06 Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.

class SumString{
	public static void main(String args[]){
		String a="11";
		String b="123";
		
		int x=a.length()-1;
		int y=b.length()-1;
		
		int carry=0;
		String sum="";
		
		while(x>=0 || y>=0 || carry>0){
			int solveA=0;
			int solveB=0;
			
			if(x>=0){
				solveA=a.charAt(x)-'0';
			}
			if(y>=0){
				solveB=b.charAt(y)-'0';
			}
			
			int total=solveA+solveB+carry;
			int digit=total%10;
			carry=total/10;
			
			sum=digit+sum;
			x--;
			y--;
		}
		System.out.println("Result: "+sum);
	}
}

//  Q-No 02 Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

class ColumnNumber{
	public static void main(String args[]){
		String result="";
		int colsNum=28;
		
		while(colsNum>0){
			colsNum--;
			int rem=colsNum%26;
			char ch=(char)('A'+rem);
			result=ch+result;
			colsNum=colsNum/26;
		}
		
		System.out.println("Result: "+result);
	}
}

//  Q-No 03 Given a string s, reverse only all the vowels in the string and return it.

class VowelReverse{
	
	public static boolean checkVowel(char ch){
		if(ch=='a' || ch=='e' || ch=='i' || ch=='o' || ch=='u'){
			return true;
		}
		return false;
	}
	
	public static String findVowel(String s){
		char[] arr=s.toCharArray();
		int left=0;
		int right=arr.length-1;
		
		while(left<right){
			while(left<right && !checkVowel(arr[left])){
				left++;
			}
			while(left<right && !checkVowel(arr[right])){
				right--;
			}
			
			char temp=arr[left];
			arr[left]=arr[right];
			arr[right]=temp;
			
			left++;
			right--;
		}
		return new String(arr);
	}
	
	public static void main(String args[]){
		String str="leetcode";
		System.out.println("Result: "+findVowel(str));
	}
}

// Q-No 04 You are given two strings s and t.String t is generated by random shuffling string s and then add one more letter at a random position.

class RandomShuffling{
	public static void main(String args[]){
		String a="abcd";
		String b="abcde";
		
		int result=0;
		
		for(char ch:a.toCharArray()){
			result=result^ch;
		}
		for(char ch:b.toCharArray()){
			result=result^ch;
		}
		
		System.out.println((char)result);
	}
}

// Q-No 05 Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

class SubsequenceStr{
	
	public static boolean findSequence(String s,String t){
		int i=0;
		int j=0;
		
		while(i<s.length() && j<t.length()){
			if(s.charAt(i)==t.charAt(j)){
				i++;
			}
			j++;
		}
		
		return i==s.length();
	}
	public static void main(String args[]){
		String s="abc";
		String t="ahbgdc";
		
		System.out.println(findSequence(s,t));
	}
}

// Q-No 07  Given a string s, return the number of segments in the string.

class NumberSegments{
	
	public static int noOfSegments(String s){
		int count=0;
		for(int i=0;i<s.length();i++){
			if(s.charAt(i)!=' ' && (i==0 || s.charAt(i-1)==' ')){
				count++;
			}
		}
		return count;
	}
	public static void main(String args[]){
		String s = "Hello";
		System.out.println("Result: "+noOfSegments(s));
		
	}
}

// Q-No 8 Given a string word, return true if the usage of capitals in it is right.

class UsageCapitals{
	public static boolean usageCapital(String word){
		int upCount=0;
		for(int i=0;i<word.length();i++){
			
			if(Character.isUpperCase(word.charAt(i))){
				upCount++;
			}
		}
		return upCount==word.length() || upCount==0 || (upCount==1 && Character.isUpperCase(word.charAt(0)));
	}
	public static void main(String args[]){
		String word="usa";
		System.out.println("Result: "+usageCapital(word));
	}
}

// Q.No - 1 Write a program that creates an integer array of 10 elements, accepts values of arrays and Find the sum of all odd numbers

class ArrayOperations{
	public static void main(String args[]){
		Scanner sc=new Scanner(System.in);
		int[] arr=new int[10];
		
		for(int i=0;i<arr.length;i++){
			arr[i]=sc.nextInt();
		}
		
		for(int i=0;i<arr.length;i++){
			if(arr[i]%2!=0){
				System.out.println(arr[i]);
			}
		}
	}
}

// Prime Number

class PrimeNumber{
	
	public static boolean checkPrime(int n){
		
		for(int i=2;i<Math.sqrt(n);i++){
			if(n%i==0){
				return false;
			}
		}
		return true;
	}
	public static void main(String args[]){
		int n=121;
		System.out.println("Result: "+checkPrime(n));
	}
}

// Write a program which generates 30 terms of Fibonacci no in an array and then prints it.

class Fibo{
	public static void main(String args[]){
		int[] arr=new int[30];
		arr[0]=0;
		arr[1]=1;
		
		for(int i=2;i<arr.length;i++){
			arr[i]=arr[i-1]+arr[i-2];		
		}
		
		for(int i=0;i<arr.length;i++){
			System.out.println(arr[i]);
		}
	}
}

// BN

class BN{
	public static void main(String args[]){
		int[] years={1982, 1987, 1993, 1996, 1999, 2003, 2006, 2007, 2009, 2010, 2016, 2002};
		Arrays.sort(years);
		int target=1100;
		System.out.println("Result: "+checkYear(years,target));
	}
		
	public static boolean checkYear(int[] year,int target){
		int left=0,right=year.length-1;
		
		while(left<=right){
			int mid=(left+right)/2;
			
			if(year[mid]==target){
				return true;
			}
			else if(year[mid]<target){
				left=mid+1;
			}
			else{
				right=mid-1;
			}
		}
		return false;
	}
}

// Selection Sort

class SelectionSort{
	public static void main(String args[]){
		int[] arr={12,43,2,2,34,521,414,13};
		
		for(int i=0;i<arr.length;i++){
			int max=i;
			for(int j=i+1;j<arr.length;j++){
				if(arr[j]<arr[max]){
					max=j;
				}
			}
			
			int temp=arr[i];
			arr[i]=arr[max];
			arr[max]=temp;
		}
		
		for(int i=0;i<arr.length;i++){
			System.out.print(arr[i]+" ");
		}
	}
}

