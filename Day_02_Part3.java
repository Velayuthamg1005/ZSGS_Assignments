import java.util.*;

// Q-No 01 Given two binary strings a and b, return their sum as a binary string

class ReturnBinarySum{
	public static void main(String args[]){
		
		String a="10";
		String b="11";
		
		String sum= sumBinary(a,b);
		System.out.println("Sum: "+sum);
	}
	
	static String sumBinary(String a,String b){
		String sum ="";
		
		int x=a.length()-1;
		int y=b.length()-1;
		
		int carry=0;
		
		while(x>=0 || y>=0 || carry>0){
			int solveA=0;
			int solveB=0;
			
			if(x>=0){
				solveA=a.charAt(x)-'0';
			}
			if(y>=0){
				solveB=b.charAt(y)-'0';
			}
			int total=solveA+solveB+carry;
			int digit=total%2;
			carry=total/2;
			
			sum=digit+sum;
			x--;
			y--;
			
		}
		return sum;
	}
}

// Q-No 02 Given an integer columnNumber, return its corresponding column title as it appears in an Excel sheet.

class ReturnColumnTitle{
	public static void main(String args[]){
		
		int columnNumber=28;
		String columnTitle=returnColNum(columnNumber);
		
		System.out.println(columnTitle);
			
	}
	
	static String returnColNum(int columnNumber){
		String result="";
		
		while(columnNumber>0){
			columnNumber--;
			int rem=columnNumber%26;
			char ch=(char)('A'+rem);
			result=ch+result;
			columnNumber=columnNumber/26;
		}
		
		return result;
	}
}


// Q-No 03 Given a string s, reverse only all the vowels in the string and return it.

class VowelReversed{
	
	public static void main(String args[]){
		
		String str="leetcode";
		
		System.out.println(reverse(str));
	}
	
	static boolean checkVowel(char c){
		c=Character.toLowerCase(c);
		return c=='a' || c=='e' || c=='i' || c=='o' || c=='u';
	}
	
	static String reverse(String str){
		
		char[] arr=str.toCharArray();
		int left=0,right=arr.length-1;
		
		while(left<right){
			while(left<right && !checkVowel(arr[left])){
				left++;
			}
			while(left<right && !checkVowel(arr[right])){
				right--;
			}
			
			char temp=arr[left];
			arr[left]=arr[right];
			arr[right]=temp;
			
			left++;
			right--;
		}
		
		return new String(arr);
	}
}

// Q-No 04 You are given two strings s and t.String t is generated by random shuffling string s and then add one more letter at a random position.

class StringRandom{
	public static void main(String args[]){
		
		String s="abcd";
		String t="abcde";
		
		System.out.println("Letter Added: "+findLetter(s,t));
	}
	
	static char findLetter(String s,String t){
		
		int result=0;
		
		for(char c: s.toCharArray()){
			result=result^c;
		}
		
		for(char c: t.toCharArray()){
			result=result^c;
		}
		
		return (char) result;
	}
}

// Q-No 05 Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

class SubsequenceOrNot{
	public static void main(String args[]){
		
		String s="abwc";
		String t="ahbgdc";
		
		System.out.println(checkSubsequence(s,t));
	}
	
	static boolean checkSubsequence(String s,String t){
		int i=0;
		int j=0;
		
		while(i<s.length() && j<t.length()){
			if(s.charAt(i)==t.charAt(j)){
				i++;
			}
			j++;
		}
		return i==s.length();
	}
}


// Q-No 06 Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.

class ReturnSum{
	
	
	public static void main(String args[]){
		
		String num1="11";
		String num2="123";
		
		System.out.println("Sum: "+addNum(num1,num2));
		
	}
	
	static String addNum(String num1,String num2){
		
		int i=num1.length()-1;
		int j=num2.length()-1;
		int carry=0;
		String result="";
		
		while(i>=0 || j>=0 || carry!=0){
			int number1=0;
			int number2=0;
			
			if(i>=0){
				number1=num1.charAt(i)-'0';
			}
			if(j>=0){
				number2=num2.charAt(j)-'0';
			}
			
			int sum=number1+number2+carry;
			carry=sum/10;
			int digit=sum%10;
			
			result=digit+result;
			i--;
			j--;
		}
		return result;
	}
}

// Q-No 07  Given a string s, return the number of segments in the string.

class ReturnSegments{
	public static void main(String args[]){
		
		String s="Hello, my name is John";
		
		System.out.println(numberSegments(s));
		
	}
	
	static int numberSegments(String s){
		int count=0;
		
		for(int i=0;i<s.length();i++){
			if(s.charAt(i)!=' ' && (i==0 || s.charAt(i-1)==' ')){
				count++;
			}
		}
		return count;
	}
}

// Q-No 8 Given a string word, return true if the usage of capitals in it is right.

class RightCapital{
	public static void main(String args[]){
		
		String test="USA";
		
		System.out.println(checkCapital(test));
	}
	
	static boolean checkCapital(String word){
		
		int upCount=0;
		
		for(int i=0;i<word.length();i++){
			if(Character.isUpperCase(word.charAt(i))){
				upCount++;
			}
		}
		
		return upCount==word.length() || upCount==0 || (upCount==1 && Character.isUpperCase(word.charAt(0)));
	}
}




